标题：在黑背景下画一个白色矩形

实现方法：

函数说明：
	#glClearColor
		功能：通过glClear使用红，绿，蓝以及AFA值来清除颜色缓冲区的，
			  并且都被归一化在（0，1）之间的值，其实就是清空当前的所有颜色。
			  红，绿，蓝和AFA值是在颜色缓冲区被清除之后使用的，并且缺省值全是0.
			  即（0，0，0，0），其实就是设置颜色
		原型：void glClearColor(GLclampf red,
                  GLclampf green,
                  GLclampf blue,
                  GLclampf alpha)
		参数：

	#glMatrixMode
		功能：指定哪一个矩阵是当前矩阵
		原型：
		参数：mode 指定哪一个矩阵堆栈是下一个矩阵操作的目标,可选值: 
			  GL_MODELVIEW、GL_PROJECTION、GL_TEXTURE.
			  说明
			  glMatrixMode设置当前矩阵模式:
			  GL_MODELVIEW,对模型视景矩阵堆栈应用随后的矩阵操作.
			  GL_PROJECTION,对投影矩阵应用随后的矩阵操作.
			  GL_TEXTURE,对纹理矩阵堆栈应用随后的矩阵操作.
			  与glLoadIdentity()一同使用
			  glLoadIdentity():将当前的用户坐标系的原点移到了屏幕中心：类似于一个复位操作
			  在glLoadIdentity()之后我们为场景设置了透视图。
			  glMatrixMode(GL_MODELVIEW)设置当前矩阵为模型视图矩阵，模型视图矩阵储存了有关物体的信息。

	#glLoadIdentity
		功能：将当前的用户坐标系的原点移到了屏幕中心：类似于一个复位操作
		原型：void glLoadIdentity(void)
		参数：
		本质概念理解：
			  1).加载glLoadIdentity()，等于是将之前矩阵变换导致变化过的栈顶矩阵重新归位，置为单位矩阵！
				等于是之前的矩阵变换带来的影响到此为止了！
			  2).产生顶点的语句，比如glutWireBox、glutSolidSphere等等，
				它们最终要与栈顶矩阵计算算出最终的顶点位置。但它们本身不会影响栈顶矩阵的值！
			  3).任何一个模型、视图变换，如translate、scale、lookAt等，
				计算后都会影响当前栈顶矩阵的值！若每次变换完毕后不去归位（glLoadIdentity），
				则下一次的顶点变换是建立在上一轮（一系列）变换的基础之上的！
			  4).根据矩阵变换本质的理解，glLoadIdentity并不是简单的理解为将坐标归为世界坐标的原点。
				而是每次建立顶点的时候，都是以当前物体的中心作为世界的原点的
				（换句话说，也就是上一轮物体变换之后，原点的位置作为新的物体的中心）。
				之后再进行各种变换而形成物体的移动、缩放、旋转等效果。从本质上讲，
				glLoadIdentity并不会改变世界坐标的原点位置，而仅仅是让“栈顶矩阵归位”。
				但它导致了下一轮顶点变换时，感觉上是以新的物体中心为世界原点的效果！

	#glOrtho
		功能：这个函数描述了一个平行修剪空间。
			  这种投影意味着离观察者较远的对象看上去不会变小（与透视投影相反）。
			  在3D笛卡尔坐标中想象这个修剪空间，左边和右边是最小和最大的X值，
			  上边和下边是最小和最大的Y值，近处和远处是最小和最大的Z值。 
			  正射投影，又叫平行投影。这种投影的视景体是一个矩形的平行管道，
			  也就是一个长方体。正射投影的最大一个特点是无论物体距离相机多远，
			  投影后的物体大小尺寸不变。这种投影通常用在建筑蓝图绘制和计算机辅助设计等方面，
			  这些行业要求投影后的物体尺寸及相互间的角度不变，以便施工或制造时物体比例大小正确。
		原型：void glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble near,GLdouble far)
		参数：

	#glBegin
		功能：glBegin和glEnd函数限定了一组或多组图元的定点定义
		原型：void glBegin(GLenummode)
　　		  void glEnd(void)
		参数：
			  mode：创建图元的类型。可以是以下数值
　　		  GL_POINTS：把每一个顶点作为一个点进行处理，顶点n即定义了点n，共绘制N个点
　　		  GL_LINES：把每一个顶点作为一个独立的线段，顶点2n－1和2n之间共定义了n条线段，总共绘制N/2条线段
　　		  GL_LINE_STRIP：绘制从第一个顶点到最后一个顶点依次相连的一组线段，第n和n+1个顶点定义了线段n，总共绘制n－1条线段
　　		  GL_LINE_LOOP：绘制从第一个顶点到最后一个顶点依次相连的一组线段，然后最后一个顶点和第一个顶点相连，第n和n+1个顶点定义了线段n，总共绘制n条线段
　　		  GL_TRIANGLES：把每个顶点作为一个独立的三角形，顶点3n－2、3n－1和3n定义了第n个三角形，总共绘制N/3个三角形
　　		  GL_TRIANGLE_STRIP：绘制一组相连的三角形，对于奇数n，顶点n、n+1和n+2定义了第n个三角形；对于偶数n，顶点n+1、n和n+2定义了第n个三角形，总共绘制N-2个三角形
　　		  GL_TRIANGLE_FAN：绘制一组相连的三角形，三角形是由第一个顶点及其后给定的顶点确定，顶点1、n+1和n+2定义了第n个三角形，总共绘制N-2个三角形
　　		  GL_QUADS：绘制由四个顶点组成的一组单独的四边形。顶点4n－3、4n－2、4n－1和4n定义了第n个四边形。总共绘制N/4个四边形
　　		  GL_QUAD_STRIP：绘制一组相连的四边形。每个四边形是由一对顶点及其后给定的一对顶点共同确定的。顶点2n－1、2n、2n+2和2n+1定义了第n个四边形，总共绘制N/2-1个四边形
　　		  GL_POLYGON：绘制一个凸多边形。顶点1到n定义了这个多边形。